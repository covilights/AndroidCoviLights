/*
 * Copyright 2020 Mohsen Mirhoseini
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'jacoco'
apply from: "$rootDir/dependencies.gradle"

jacoco {
    toolVersion = "$jacoco_version"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

tasks.create(name: "jacoco", type: JacocoReport, dependsOn: ["testDebugUnitTest", "createDebugCoverageReport"]) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for build."

    reports {
        html.enabled = true
        xml.enabled = true
    }

    def excludes = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            'androidx/**/*.*',
            '**/BR.*',
            '**/*Binding.*',
            '**/*Binding*Impl.*',
            '*_.*',
            '**/*Directions.*',
            '**/*Args.*'
    ]
    def javaClasses = fileTree(dir: "$project.buildDir/intermediates/javac/debug", excludes: excludes)
    def kotlinClasses = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: excludes)
    getClassDirectories().setFrom(files([javaClasses, kotlinClasses]))

    getSourceDirectories().setFrom(files([
            "$project.projectDir/src/main/java",
            "$project.projectDir/src/debug/java",
            "$project.projectDir/src/here/java",
    ]))

    def includes = [
            'jacoco/debugUnitTest.exec',
            'outputs/code_coverage/debugAndroidTest/connected/**/*.ec'
    ]
    getExecutionData().setFrom(fileTree(dir: project.buildDir, includes: includes))
}
