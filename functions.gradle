import java.text.SimpleDateFormat

gradle.allprojects {

    ext.commitAuthor = {
        def p = 'git log -n 1 --format=%an'.execute([], rootDir)
        p.waitFor()
        if (p.exitValue() != 0) {
            throw new RuntimeException(p.errorStream.text)
        }

        return p.text.trim()
    }

    ext.commitMessage = {
        def p = 'git log -n 1 --format=%B'.execute([], rootDir)
        p.waitFor()
        if (p.exitValue() != 0) {
            throw new RuntimeException(p.errorStream.text)
        }

        return p.text.trim()
    }

    ext.commitShortHash = {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }

    ext.gitSha = {
        def p = 'git rev-parse HEAD'.execute([], project.rootDir)
        p.waitFor()
        if (p.exitValue() != 0) {
            throw new RuntimeException(p.errorStream.text)
        }

        return p.text.trim()
    }

    ext.gitTimestamp = {
        def p = 'git log -n 1 --format=%at'.execute([], rootDir)
        p.waitFor()
        if (p.exitValue() != 0) {
            throw new RuntimeException(p.errorStream.text)
        }

        return p.text.trim()
    }

    ext.gitCurrentBranch = {
        def p = 'git branch --show-current'.execute([], rootDir)
        p.waitFor()
        if (p.exitValue() != 0) {
            throw new RuntimeException(p.errorStream.text)
        }

        return p.text.trim()
    }

    ext.buildTime = {
        def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'")
        df.setTimeZone(TimeZone.getTimeZone("UTC"))
        return df.format(new Date())
    }
}
